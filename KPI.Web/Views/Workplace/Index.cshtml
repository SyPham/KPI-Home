@using MvcBreadCrumbs
@{
    ViewBag.Title = "Workplace";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@Html.Raw(BreadCrumb.Display())
<div class="row">
    <div class="col-md-12">
        <div class="box box-widget">
            <div class="box-header with-border">
                <button type="button" data-toggle="modal" data-target="#modal-group" class="btn pull-right btn-microsoft btn-upload"><i class="fa fa-upload"></i> Upload File</button>
                <h3 class="box-title">List KPIs </h3>
            </div>
            <!-- /.box-header -->
            <div class="box-body table-responsive no-padding">
                <table class="table table-hover table-bordered" id="tableWorkplace">
                    <thead>
                        <tr>
                            <th style="width: 10px">#</th>
                            <th>KPI Name</th>
                            <th class="text-center"> State Upload Week </th>
                            <th class="text-center"> State Upload Month </th>
                            <th class="text-center"> State Upload Quarter </th>
                            <th class="text-center"> State Upload Year </th>
                        </tr>
                    </thead>
                    <tbody class="tbody">
                    </tbody>
                </table>
                <script id='tableWorkplace-template' type="text/template">
                    <tr>
                        <td>{{No}}</td>
                        <td>
                            <strong>{{KPIName}}</strong>
                        </td>
                        <td>{{{StateW}}}</td>
                        <td>{{{StateM}}}</td>
                        <td>{{{StateQ}}}</td>
                        <td>{{{StateY}}}</td>
                    </tr>
                </script>
            </div>
            <!-- /.box-body -->
            <div class="box-footer clearfix">
                <p class="pull-left total">

                </p>
                <ul id="paginationWorkplace" class="pagination pagination-sm no-margin pull-right">
                    <li><a href="#">«</a></li>
                    <li><a href="#">1</a></li>
                    <li><a href="#">2</a></li>
                    <li><a href="#">3</a></li>
                    <li><a href="#">»</a></li>
                </ul>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        <div class="box box-widget">
            <div class="box-header with-border">
                <h3 class="box-title">List Related KPIs</h3>
            </div>
            <!-- /.box-header -->
            <div class="box-body table-responsive no-padding">
                <table class="table table-hover table-bordered" id="tableWorkplaceTrack">
                    <thead>
                        <tr>
                            <th style="width: 10px">#</th>
                            <th>KPI Name</th>
                            <th>Area</th>
                            <th class="text-center"> State Upload Week </th>
                            <th class="text-center"> State Upload Month </th>
                            <th class="text-center"> State Upload Quarter </th>
                            <th class="text-center"> State Upload Year </th>
                        </tr>
                    </thead>
                    <tbody class="tbodyTrack">
                    </tbody>
                </table>
                <script id='tableWorkplaceTrack-template' type="text/template">
                    <tr>
                        <td class="text-center">{{No}}</td>
                        <td class="text-center">
                            <strong>{{KPIName}}</strong>
                        </td>
                        <td class="text-center">
                            <strong>{{Area}}</strong>
                        </td>
                        <td class="text-center">{{{StateW}}}</td>
                        <td class="text-center">{{{StateM}}}</td>
                        <td class="text-center">{{{StateQ}}}</td>
                        <td class="text-center">{{{StateY}}}</td>
                    </tr>
                </script>
            </div>
            <!-- /.box-body -->
            <div class="box-footer clearfix">
                <p class="pull-left total-realted">

                </p>
                <ul id="paginationWorkplaceTrack" class="pagination pagination-sm no-margin pull-right">
                    <li><a href="#">«</a></li>
                    <li><a href="#">1</a></li>
                    <li><a href="#">2</a></li>
                    <li><a href="#">3</a></li>
                    <li><a href="#">»</a></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@RenderPage("_Modal.cshtml")
@section Scripts{
    <script>

        $(document).ready(function () {

            var workplaceConfig = {
                pageSize: 5,
                pageIndex: 1
            }
            var workplaceTrackConfig = {
                pageSize: 5,
                pageIndex: 1
            }
            var workplaceController = {
                init() {
                    workplaceController.loadData();
                    workplaceController.loadDataTrack();
                    workplaceController.registerEvent();
                },
                registerEvent() {

                },
                loadData(changePageSize) {
                    var userid = $('#user').data('userid');
                    $.get("UpLoadKPILevel",
                        {
                            userid: userid,
                            page: workplaceConfig.pageIndex,
                            pageSize: workplaceConfig.pageSize
                        },
                        function (data, status) {
                            var KPIUpLoads = data.KPIUpLoads;
                            var total = data.total;
                            $('.total').text("Total record : " + total);
                            var html = '';
                            var count = 1;
                            var template = $('#tableWorkplace-template').html();
                            $.each(KPIUpLoads, function (i, item) {
                                html += Mustache.render(template, {
                                    No: count,
                                    KPIName: item.KPIName,
                                    StateW: item.StateW == true ? '<span class="badge bg-green">on time</span>' : '<span class="badge bg-red">late</span>',
                                    StateM: item.StateM == true ? '<span class="badge bg-green">on time</span>' : '<span class="badge bg-red">late</span>',
                                    StateQ: item.StateQ == true ? '<span class="badge bg-green">on time</span>' : '<span class="badge bg-red">late</span>',
                                    StateY: item.StateY == true ? '<span class="badge bg-green">on time</span>' : '<span class="badge bg-red">late</span>',
                                });
                                count++;
                            });
                            $('.tbody').empty();
                            $('.tbody').html(html);
                            workplaceController.pagingWorkplace(total, function () {
                                workplaceController.loadData();
                            }, changePageSize);
                            workplaceController.registerEvent();
                        });
                },
                pagingWorkplace: function (totalRow, callback, changePageSize) {
                    var totalPage = Math.ceil(totalRow / workplaceConfig.pageSize);

                    //Unbind pagination if it existed or click change pagesize
                    if ($('#paginationWorkplace a').length === 0 || changePageSize === true) {
                        $('#paginationWorkplace').empty();
                        $('#paginationWorkplace').removeData("twbs-pagination");
                        $('#paginationWorkplace').unbind("page");
                    }

                    $('#paginationWorkplace').twbsPagination({
                        totalPages: totalPage === 0 ? 1 : totalPage,
                        first: "First",
                        next: "Next",
                        last: "Last",
                        prev: "Previous",
                        visiblePages: 10,
                        onPageClick: function (event, page) {
                            workplaceConfig.pageIndex = page;
                            setTimeout(callback, 500);
                        }
                    });
                }
                ,
                loadDataTrack(changePageSize) {
                    var userid = $('#user').data('userid');
                    $.get("UpLoadKPILevelTrack",
                        {
                            userid: userid,
                            page: workplaceTrackConfig.pageIndex,
                            pageSize: workplaceTrackConfig.pageSize
                        },
                        function (data, status) {
                          
                                var KPIUpLoads = data.model;
                                console.log(data.model);
                                var total = data.total;
                                $('.total-realted').text("Total record : " + total);
                                var html = '';
                                var count = 1;
                                var template = $('#tableWorkplaceTrack-template').html();
                                $.each(KPIUpLoads, function (i, item) {
                                    html += Mustache.render(template, {
                                        No: count,
                                        KPIName: item.KPIName,
                                        Area: item.Area,
                                        StateW: item.StateW == true ? '<span class="badge bg-green">on time</span>' : '<span class="badge bg-red">late</span>',
                                        StateM: item.StateM == true ? '<span class="badge bg-green">on time</span>' : '<span class="badge bg-red">late</span>',
                                        StateQ: item.StateQ == true ? '<span class="badge bg-green">on time</span>' : '<span class="badge bg-red">late</span>',
                                        StateY: item.StateY == true ? '<span class="badge bg-green">on time</span>' : '<span class="badge bg-red">late</span>',
                                    });
                                    count++;
                                });
                                $('.tbodyTrack').empty();
                                $('.tbodyTrack').html(html);
                                workplaceController.pagingWorkplaceTrack(total, function () {
                                    workplaceController.loadDataTrack();
                                }, changePageSize);
                                workplaceController.registerEvent();
                            

                        });
                },
                pagingWorkplaceTrack: function (totalRow, callback, changePageSize) {
                    var totalPage = Math.ceil(totalRow / workplaceTrackConfig.pageSize);

                    //Unbind pagination if it existed or click change pagesize
                    if ($('#paginationWorkplaceTrack a').length === 0 || changePageSize === true) {
                        $('#paginationWorkplaceTrack').empty();
                        $('#paginationWorkplaceTrack').removeData("twbs-pagination");
                        $('#paginationWorkplaceTrack').unbind("page");
                    }

                    $('#paginationWorkplaceTrack').twbsPagination({
                        totalPages: totalPage === 0 ? 1 : totalPage,
                        first: "First",
                        next: "Next",
                        last: "Last",
                        prev: "Previous",
                        visiblePages: 10,
                        onPageClick: function (event, page) {
                            workplaceTrackConfig.pageIndex = page;
                            setTimeout(callback, 500);
                        }
                    });
                }
            }
            workplaceController.init();

            $('#Upload .download').click(function () {
                console.log("click download");
                var userid = $('#user').data('userid');
                $.ajax({
                    type: "POST",
                    url: "/Workplace/ExcelExport",
                    data: { userid: userid },
                    cache: false,
                    success: function (data) {
                        window.location = '/Workplace/Download';
                    },
                    error: function (data) {
                        Materialize.toast("Something went wrong. ", 3000, 'rounded');
                    }
                });
            });

            $('table tr').addClass("text-center");
            $('table th').addClass("text-center");
            $('table tr td:last-child').css("width", "60px");

            $('table tr td button').on('click', function () {
                $(this).next().click();
            });

            $('table tr td i').click(function () {
                $(this).toggleClass('text-red');
            });

            $("form#upload").submit(function (e) {
                e.preventDefault();
                console.log("click upload");
                var formData = new FormData(this);
                var upload = function () {
                    $.ajax({
                        url: "/Workplace/Submit",
                        type: 'POST',
                        data: formData,
                        dataType: 'json',
                        processData: false,  // tell jQuery not to process the data
                        contentType: false,  // tell jQuery not to set contentType
                        success: function (result) {
                            if (result) {
                                Swal.fire({
                                    title: 'Success!',
                                    text: 'Upload successfully!',
                                    type: 'success',
                                    confirmButtonText: 'OK'
                                });
                                $("#modal-group").modal('hide');
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Upload failed!',
                                    type: 'error'
                                });
                            }
                        }
                    });
                }
                upload();
            });
        });
    </script>
}