@model KPI.Model.ViewModel.ChartVM
@using KPI.Model.helpers;
@using MvcBreadCrumbs
@{
    ViewBag.Title = "Chart";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var datasets = ViewBag.Datasets as int[];
    var dataremarks = (List<KPI.Model.ViewModel.Dataremark>)ViewBag.Dataremarks;
    var labels = ViewBag.Labels as string[];
    var label = ViewBag.Label as string;
    var kpiname = ViewBag.KPIName as string;
    var period = ViewBag.Period as string;
    var kpilevelcode = ViewBag.KPILevelCode as string;
    var statusfavorite = ViewBag.StatusFavorite as string;
    int standard = (int)ViewBag.Standard;
    var unit = ViewBag.Unit as string;
}
@Html.Raw(BreadCrumb.Display())
@section Scripts{
    <script type="text/javascript">
        var labelString;
        if ("@period" === "W") {
            labelString = " Weeks in year ";
            $("#searchWeek").show();
        }
        if ("@period" === "M") {
            labelString = "Months in year";
              $("#searchMonth").show();
        }
        if ("@period" === "Q") {
            labelString = "Quarters in year";
              $("#searchQuarter").show();
        }
        if ("@period" === "Y") {
            labelString = "Years";
              $("#searchYear").show();
        }
        var datasets =@Html.Raw(Json.Encode(datasets));
         if (datasets.length === 0) {
                   Swal.fire({
                        title: 'There is no data!',
                        //text: 'Error',
                        type: 'error'
                    });
             }

        var labels =@Html.Raw(Json.Encode(labels));
        var dataremarks =@Html.Raw(Json.Encode(dataremarks));
        var label = "@label";
        var period = "@period";
        var kpilevelcode = "@kpilevelcode";
        var standard = "@standard";
        var unit = "@unit";
        $(function () {
            $('.standard').text(standard);
            if (period === "W") {
            //Thêm tiêu đề cho tr:first-child th
                $("#tblDataChart tr:first-child").append("<th>Week</th>");

            //Thêm dữ liệu tr từ tuần 1 đến tuần còn lại
            $.each(labels, function (key, item) {
                $("#tblDataChart tr:first-child").append("<th>" + item + "</th>");
            });

            //Thêm tiêu đề cho tr:nth-child(2) th
            $("#tblDataChart tr:nth-child(2)").append("<th >"+unit+"</th>");

             //Thêm dữ liệu cho tr:nth-child(2) td
            $.each(labels, function (key, item) {
                $("#tblDataChart tr:nth-child(2)").append("<td data-id='' class='unselectable'>0</td>");
            });

            $.each(dataremarks, function (key, item) {
                $("#tblDataChart tr:nth-child(2)").children("td:eq('" + (item.Week - 1) + "')").text(item.Value);
                $("#tblDataChart tr:nth-child(2)").children("td:eq('" + (item.Week - 1) + "')").attr('data-id', item.ID);
            });

        var lastRemark = dataremarks[dataremarks.length - 1]==undefined?"":dataremarks[dataremarks.length - 1];
                $('#lastRemark').val(lastRemark.Remark);
                $('.lastRemark').text(lastRemark.ID);
                $('.lastRemarkLabel').text("Week " + lastRemark.Week + " : ");
                $("#fromDateEndDate").show();

            
               
        }
    else if (period === "M") {
            //Thêm tiêu đề cho tr:first-child th
            $("#tblDataChart tr:first-child").append("<th >Month</th>");

            //Thêm dữ liệu tr từ tháng 1 đến tháng còn lại
            $.each(labels, function (key, item) {
                $("#tblDataChart tr:first-child").append("<th >" + item + "</th>");
            });

            //Thêm tiêu đề cho tr:nth-child(2) th
                $("#tblDataChart tr:nth-child(2)").append("<th >Percentage</th>");


             //Thêm dữ liệu cho tr:nth-child(2) td
            $.each(labels, function (key, item) {
                $("#tblDataChart tr:nth-child(2)").append("<td>0</td>");
            });

            $.each(dataremarks, function (key, item) {
               $("#tblDataChart tr:nth-child(2)").children("td:eq('" + (item.Month-1) + "')").text(item.Value);
            });

        var lastRemark = dataremarks[dataremarks.length - 1]==undefined?"":dataremarks[dataremarks.length - 1];

             $('#lastRemark').val(lastRemark.Remark);
            $('.lastRemarkLabel').text("Month " + lastRemark.Month + " : ");
                
        }
    else if (period=== "Q") {
             //Thêm tiêu đề cho tr:first-child th
            $("#tblDataChart tr:first-child").append("<th >Quarter</th>");

            //Thêm dữ liệu tr từ quý 1 đến tháng còn lại
            $.each(labels, function (key, item) {
                $("#tblDataChart tr:first-child").append("<th >" + item + "</th>");
        });

            //Thêm tiêu đề cho tr:nth-child(2) th
            $("#tblDataChart tr:nth-child(2)").append("<th >Percentage</th>");


             //Thêm dữ liệu cho tr:nth-child(2) td
            $.each(labels, function (key, item) {
                $("#tblDataChart tr:nth-child(2)").append("<td>0</td>");
            });

            $.each(dataremarks, function (key, item) {
               $("#tblDataChart tr:nth-child(2)").children("td:eq('" + (item.Quarter-1) + "')").text(item.Value);
            });

            //var lastRemark = dataremarks[dataremarks.length - 1];
            // $('#lastRemark').val(lastRemark.Remark);
            //$('.lastRemarkLabel').text("Quarter " + lastRemark.Quarter + " : ");

            ////Hiển thị ngày tháng dưới chartjs
            //$("#fromDateEndDateQ").show();
            
        }
    else if (period === "Y") {

             //Thêm tiêu đề cho tr:first-child th
            $("#tblDataChart tr:first-child").append("<th >Year</th>");

            //Thêm dữ liệu tr từ quý 1 đến tháng còn lại
            $.each(labels, function (key, item) {
                $("#tblDataChart tr:first-child").append("<th >" + item + "</th>");
            });

            //Thêm tiêu đề cho tr:nth-child(2) th
            $("#tblDataChart tr:nth-child(2)").append("<th >Percentage</th>");


             //Thêm dữ liệu cho tr:nth-child(2) td
            $.each(labels, function (key, item) {
                $("#tblDataChart tr:nth-child(2)").append("<td>0</td>");
            });

            $.each(dataremarks, function (key, item) {
               $("#tblDataChart tr:nth-child(2)").children("td:eq('" + (item.Year-1) + "')").text(item.Value);
            });
            // var lastRemark = dataremarks[dataremarks.length - 1];
            // $('#lastRemark').val(lastRemark.Remark);
            //$('.lastRemarkLabel').text("Year " + lastRemark.Year + " : " );
               
        }
            //var standards = [];
            //for (let i = 0; i < labels.length; i++) {

            //    standards.push(standard);
            //}
            //---------------------------------------------------------------------------------
            for (var i = 0; i < datasets.length; i++) {
                if (datasets[i] === 0) {
                    datasets[i] = undefined;
                }
            }
            var listData = {
                label: label,
                data: datasets,
                spanGaps: false, //data=undefined thi k draw line
                datalabels: {
                    align: 'center',
                    anchor: 'center',

                 listeners: {
                    click: function(context) {
                      // Receives `click` events only for labels of the first dataset.
                         // The clicked label index is available in `context.dataIndex`.
                         //console.log('label ' + context.dataIndex + ' has been clicked!');
                    }
                }
                }
            };
            var options = {

                annotation: {
                  annotations: [{
                    type: 'line',
                    mode: 'horizontal',
                    scaleID: 'y-axis-0',
                    value: standard,
                    borderColor: '#09a99f',
                    borderWidth: 3,
                    label: {
                      enabled: true,
                        //content: 'standard',
                        backgroundColor: '#09a99f',
                        fontSize: 12,
                      fontStyle: "bold",
                    }
                  }]
             },
                    plugins: {
                        datalabels: {
                            backgroundColor: function (context) {
                                return context.dataset.backgroundColor;
                            },
                            borderRadius: 4,
                            color: 'white',
                            font: {
                                weight: 'bold',
                                size:12
                            },
                            formatter: Math.round,
                            display: function (context) {
                                if (context.dataset.data[1] !== 0)
                                    return context.dataset.data;
                                else return false;
                            }
                        }
                    }
                   ,
                     title: {
                    display: true,
                        text: "KPI Chart - @label - @kpiname",
                        fontSize: 20,
                        fontColor: 'black'
                    },
                elements: {
                         point:{
                        radius: 0
                    },
                        line: {
                            tension: 0.2
                        }
                    },
                    scales: {
                yAxes: [{
                    display: true,
                    position: "left",
                    ticks: {
                        beginAtZero: true,
                        padding: 10,
                        fontSize: 12,
                        //max: 100
                    },
                     scaleLabel: {
                        display: true,
                         labelString: unit,
                         fontSize: 12,
                          fontStyle:'normal'
                      }
                }],
                xAxes: [{
                    gridLines: {
                        display: true,
                        tickMarkLength: 8
                    },
                    ticks: {
                        fontSize: 12,
                    }
                    ,
                     scaleLabel: {
                        display: true,
                         labelString: labelString,
                         fontSize: 12,
                          fontStyle:'normal'
                      }
                }]
            }
            }

                 var chart = new Chart('lineChart', {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [listData]
                },
                options: options
                 });
            var chartdatasets = chart.data.datasets[0].data
            var m;
            for (var i = chartdatasets.length; i > 0; i--) {
                if (chartdatasets[i] > 0) {
                    m = chartdatasets[i];
                    break;
                } else {
                    m = 0;
                }
            }

                if (m < standard) {
                    chart.data.datasets[0].borderColor = "red";
                     chart.data.datasets[0].backgroundColor="red";
                     chart.update();
                }else if(m===0){
                    chart.data.datasets[0].borderColor = "red";
                    chart.data.datasets[0].backgroundColor="red";
                     chart.update();
                } else {
                    chart.data.datasets[0].borderColor = "green";
                    chart.data.datasets[0].backgroundColor="green";
                     chart.update();
                }

            chartperiodController.init();
            //
});
var chartperiodlConfig = {
    pageSize: 6,
    pageIndex: 1
};
var chartperiodController = {
    init() {

        chartperiodController.loadDataProvide();
        chartperiodController.registerEvent();

    },
    registerEvent() {

        $('#lastRemark').off('keypress').on('keypress', function (e) {
            if (e.keyCode === 13) {
                chartperiodController.UpdateRemark();
            }
        });
        var year = chartperiodController.getUrlParameter('year');
        var start = chartperiodController.getUrlParameter('start');
        var end = chartperiodController.getUrlParameter('end');
        var period = chartperiodController.getUrlParameter('period');
        if (Number(year) === 2019 && Number(start) === 0 && Number(end) === 0) {
            $("#fromDateEndDate").hide();
            var d = new Date();
            var currenyear = d.getFullYear();
            year = currenyear;
            start = 0;
            end = 0;
            if (period === "W") {
                $("#weekOfYear").val(currenyear);
                $("#startWeek").val(0);
                $("#endWeek").val(0);

            }

            if (period === "M") {
                $("#monthOfYear").val(currenyear);
                $("#startMonth").val(0);
                $("#endMonth").val(0);
                 year = currenyear;
                    start = 0;
                    end = 0;
            }
            if (period === "Q") {
                $("#quarterOfYear").val(currenyear);
                $("#startQuarter").val(0);
                $("#endQuarter").val(0);
                 year = currenyear;
                    start =0;
                    end = 0;
            }
            if (period === "Y") {
                $("#weekOfYear").val(currenyear);
                $("#startYear").val(currenyear);
                $("#endYear").val(currenyear);
                    year = currenyear;
                    start = currenyear;
                    end = currenyear;
            }
        }
        else {
            $("#weekOfYear").val(year);
            $("#startWeek").val(start);
            $("#endWeek").val(end);

            $("#monthOfYear").val(year);
            $("#startMonth").val(start);
            $("#endMonth").val(end);


            $("#quarterOfYear").val(year);
            $("#startQuarter").val(start);
            $("#endQuarter").val(end);

            $("#weekOfYear").val(year);
            $("#startYear").val(start);
            $("#endYear").val(end);

        }

        if (Number($('#weekOfYear').val()) !== 0) {
           var year = year;
            var startWeek = start;
            var fromDate = new Date("Jan 01, " + year + " 01:00:00");
            var fw = fromDate.getTime() + 604800000 * (startWeek - 1);

            var fromDayStartWeek = new Date(fw);
            var fromDayStartW = (fromDayStartWeek.getMonth() + 1) + ' - ' + fromDayStartWeek.getDate() + ' - ' + fromDayStartWeek.getFullYear();

            var endDayStartWeek = new Date(fw + 518400000);
            var endDayStartW = (endDayStartWeek.getMonth() + 1) + ' - ' + endDayStartWeek.getDate() + ' - ' + endDayStartWeek.getFullYear();

            var endWeek = end;
            var ed = new Date("Jan 01, " + year + " 01:00:00");
            var ew = ed.getTime() + 604800000 * (endWeek - 1);

            var fromDayEndWeek = new Date(ew);
            var fromDayEndW = (fromDayEndWeek.getMonth()+1) + ' - ' + fromDayEndWeek.getDate() + ' - ' + fromDayEndWeek.getFullYear();


            var endDayEndWeek = new Date(ew + 518400000);
            var endDayEndW = (endDayEndWeek.getMonth() + 1) + ' - ' + endDayEndWeek.getDate() + ' - ' + endDayEndWeek.getFullYear();

              $("#fromDateEndDate .fromDayOfWeek").text('Week '+start+' ( from ' + fromDayStartW + ' to ' + endDayStartW +' )');
              $("#fromDateEndDate .endDayOfWeek").text(' -> Week '+end+' ( from ' + fromDayEndW + ' to ' + endDayEndW+' )');

        }
        if (Number($('#monthOfYear').val()) !== 0) {
            var now = new Date(year,start,1);
            var prevMonthLastDate = new Date(now.getFullYear(), now.getMonth(), 0);
            var prevMonthFirstDate = new Date(now.getFullYear() - (now.getMonth() > 0 ? 0 : 1), (now.getMonth() - 1 + 12) % 12, 1);

            var formatDateComponent = function(dateComponent) {
              return (dateComponent < 10 ? '0' : '') + dateComponent;
            };

            var now2 = new Date(year,end,1);
            var prevMonthLastDate2 = new Date(now2.getFullYear(), now2.getMonth(), 0);
            var prevMonthFirstDate2 = new Date(now2.getFullYear() - (now2.getMonth() > 0 ? 0 : 1), (now2.getMonth() - 1 + 12) % 12, 1);

            var formatDateComponent = function(dateComponent) {
              return (dateComponent < 10 ? '0' : '') + dateComponent;
            };

            var formatDate = function(date) {
              return formatDateComponent(date.getMonth() + 1) + ' - ' + formatDateComponent(date.getDate()) + ' - ' + date.getFullYear();
            };


              $("#fromDateEndDateM .fromDayOfMonth").text('Month '+start+' ( from ' + formatDate(prevMonthFirstDate) + ' to ' + formatDate(prevMonthLastDate) +' )');
              $("#fromDateEndDateM .endDayOfMonth").text(' -> Month '+end+' ( from ' + formatDate(prevMonthFirstDate2) + ' to ' + formatDate(prevMonthLastDate2)+' )');
        }

         if (Number($('#quarterOfYear').val()) !== 0) {
            var startQ = new Date(year,start*3-3,1);
             var endQ = new Date(year, start * 3, 0);

              var startQ2 = new Date(year,end*3-3,1);
             var endQ2 = new Date(year, end * 3, 0);
               var formatDateComponent = function(dateComponent) {
              return (dateComponent < 10 ? '0' : '') + dateComponent;
             };

            var formatDate = function(date) {
              return formatDateComponent(date.getMonth() + 1) + ' - ' + formatDateComponent(date.getDate()) + ' - ' + date.getFullYear();
            };
            //var formatDate = function(date) {
            //  return (date.getMonth() + 1) + '/' + (date.getDate()) + '/' + date.getFullYear();
            //};
              $("#fromDateEndDateQ .fromDayOfQuarter").text('Quarter '+start+' ( from ' + formatDate(startQ) + ' to ' + formatDate(endQ) +' )');
              $("#fromDateEndDateQ .endDayOfQuarter").text(' -> Quarter '+end+' ( from ' + formatDate(startQ2) + ' to ' + formatDate(endQ2)+' )');

        }
        $('#btnClearSearch').off('click').on('click', function () {
             let kpilevelcode = chartperiodController.getUrlParameter('kpilevelcode');
            let period = chartperiodController.getUrlParameter('period');
             let d = new Date();
            let currenyear = d.getFullYear();
           window.location.href = "/ChartPeriod/?kpilevelcode="+kpilevelcode+"&period="+period+"&year="+currenyear+"&start=0&end=0";

        })

        //$('#comment').unbind('keypress').on('keypress', function (e) {
        //    if (e.keyCode == 13) {

        //        chartperiodController.addData();
        //        $('#boxComments').empty();
        //        chartperiodController.loadDataComment();
        //    }

        //});
        //$('#btnComment').off('click').on('click', function (e) {
        //    if (e.keyCode === 13) {

        //        chartperiodController.addData();
        //        $('#boxComments').empty();
        //        chartperiodController.loadDataComment();

        //    }
        //});
         $('#btnLike').off('click').on('click', function (e) {

                chartperiodController.addFavourite();
          });
         $('#endWeek').off('change').on('change', function (e) {
             chartperiodController.search();

         });
         $('#endMonth').off('change').on('change', function (e) {
             chartperiodController.search();

         });
         $('#endQuarter').off('change').on('change', function (e) {
             chartperiodController.search();

         });
         $('#endYear').off('change').on('change', function (e) {
             chartperiodController.search();
         });
        $('#btnCompare').off('click').on('click', function (e) {
             chartperiodController.loadDataProvide();
        });
        
        
        $("#tblDataChart tr:nth-child(2) td").off('click').on('click', function () {
            var number = Number($(this).text());
            if (number > 0 && number < standard) {

                $('#modal-group-comment-data').modal('show');
                var id = $(this).data('id');
                $('.dataid').text(id);
                
                chartperiodController.Remark(id);

                //Khi tao ra table roi thi moi load data
                chartperiodController.loadDataComment();
               
            }
        });
        $('#modal-group-comment-data').unbind().on('hidden.bs.modal', function () {
            console.log("da add comment");
            var userid = $('#user').data('userid');
            var dataid  =Number($('.dataid').text())
            chartperiodController.AddCommentHistory(userid,dataid);
          // do something…
        })
       
        $('.btnComment').off('click').on('click', function () {
            chartperiodController.addData(); 
        });
    },
    search() {
          if ("@period" === "W")
                    window.location.href = "/ChartPeriod/?kpilevelcode=@kpilevelcode&period=@period&year="+Number($("#weekOfYear").val())+"&start=" + Number($("#startWeek").val()) + "&end=" + Number($("#endWeek").val());

         if ("@period" === "M")
                   window.location.href = "/ChartPeriod/?kpilevelcode=@kpilevelcode&period=@period&year="+Number($("#monthOfYear").val())+"&start=" + Number($("#startMonth").val()) + "&end=" + Number($("#endMonth").val());

         if ("@period" === "Q")
                  window.location.href = "/ChartPeriod/?kpilevelcode=@kpilevelcode&period=@period&year="+Number($("#quarterOfYear").val())+"&start=" + Number($("#startQuarter").val()) + "&end=" + Number($("#endQuarter").val());

          if ("@period" === "Y")
                   window.location.href = "/ChartPeriod/?kpilevelcode=@kpilevelcode&period=@period&year=0&start=" + Number($("#startYear").val()) + "&end=" + Number($("#endYear").val());
    },
    addData() {
        if ($('#comment').val() == "") {
            Swal.fire({
                title: 'Warning!',
                text: 'Please enter message!',
                type: 'warning',
                confirmButtonText: 'OK'
            });
            return;
        }
        var mObj = {
            DataID: Number($('.dataid').text()),
            CommentMsg: $('#comment').val(),
            UserID: Number($("#user").data('userid'))
        };
        $.ajax({
            url: "/ChartPeriod/AddComment",
            data: JSON.stringify(mObj),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                $('#comment').val("");
                chartperiodController.loadDataComment();
            },
            error: function (errormessage) {
                //console.log(errormessage.responseText);
            }
        });
    //},
    //addDataHistory() {
    //    if ($('#comment').val() == "") {
    //        Swal.fire({
    //            title: 'Warning!',
    //            text: 'Please enter message!',
    //            type: 'warning',
    //            confirmButtonText: 'OK'
    //        });
    //        return;
    //    }
    //    var mObj = {
    //        UserID: Number($("#user").data('userid'))
    //    };
    //    $.ajax({
    //        url: "/ChartPeriod/AddCommentHistory",
    //        data: JSON.stringify(mObj),
    //        type: "POST",
    //        contentType: "application/json;charset=utf-8",
    //        dataType: "json",
    //        success: function (result) {
    //            $('#comment').val("");
    //            chartperiodController.loadDataComment();
    //        },
    //        error: function (errormessage) {
    //            //console.log(errormessage.responseText);
    //        }
    //    });
    },
    getUrlParameter: function(sParam) {
    var sPageURL = window.location.search.substring(1),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
        }
    },
    addFavourite() {
        var UserID = $('#user').data('userid');
        if (UserID === 0 || UserID === "" || UserID === undefined) {
            Swal.fire({
                title: 'Warning!',
                text: 'Error!',
                type: 'warning',
                confirmButtonText: 'OK'
            });
            return;
        }
        var mObj = {
            KPILevelCode: "@kpilevelcode",
            Period: "@period",
            UserID: UserID,
        };
        $.ajax({
            url: "/ChartPeriod/AddFavourite",
            data: JSON.stringify(mObj),
            type: "POST",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (result) {
                //
                Swal.fire({
                    title: 'success!',
                    text: 'Add success!',
                    type: 'success',
                    confirmButtonText: 'OK'
                });
            },
            error: function (errormessage) {
                //console.log(errormessage.responseText);
            }
        });
    },
    Remark(id) {

        $.post("/ChartPeriod/Remark", { dataid: id }, function (data) {
            var result = data.model;
            var userid = $('#user').data('userid');

           var users = data.users;
                //console.log(data)
            $('#comment').suggest('@@', {
                    filter: {
                      casesensitive: true,
                      limit: 10
                    },
                  data: users,
                  map: function(user) {
                    return {
                      value: user.Username,
                      text: '<strong>Username: '+user.Username+' - </strong> <small>Full name :'+user.FullName+'</small>'
                    }
                  }
                })

            //$("#remark").val(result.Remark);
                $(".lastRemark").text(id);

             //$("#textarea-remark").toggle(500);
            if (result.Period === "W") {
                if (result.Remark !== null) {
                    $("#lastRemark").val(result.Remark);
                    $("#remark").val("Week " + result.Week + " : " + result.Remark);
                    $('.lastRemarkLabel').text("Week " + result.Week + " : ");
                }
             }
            if (result.Period === "M") {
                if (result.Remark !== null) {
                    $("#lastRemark").val(result.Remark);
                    $("#remark").val("Month " + result.Month + " : " + result.Remark);
                    $('.lastRemarkLabel').text("Month " + result.Month + " : ");
                }
             }
             if (result.Period === "Q") {
                 $("#lastRemark").val(result.Remark);
                 $("#remark").val("Quarter " + result.Quater + " : " + result.Remark);
                $('.lastRemarkLabel').text("Quarter " + result.Quater + " : " );

             }
            if (result.Period === "Y") {
                 $("#lastRemark").val(result.Remark);
                 $("#remark").val("Year " + result.Year + " : " + result.Remark);
                $('.lastRemarkLabel').text("Year " + result.Year + " : ");

             }
        });
    },
    UpdateRemark() {
        var remark = $('#lastRemark').val();
        var dataid = Number($('.lastRemark').text());
         $.post("/ChartPeriod/UpdateRemark", { dataid:dataid , remark:remark }, function (result) {
            Swal.fire({
                title: 'Success!',
                text: 'Add successfully!',
                type: 'success',
                confirmButtonText: 'OK'
            });
        });
    },
     AddCommentHistory(userid,dataid) {
        //var userid = Number($('#user').data("userid"));
         $.post("/ChartPeriod/AddCommentHistory", { userid: userid, dataid: dataid }, function (result) {
             console.log("data add comment" + result);
            //Swal.fire({
            //    title: 'Success!',
            //    text: 'Add successfully!',
            //    type: 'success',
            //    confirmButtonText: 'OK'
            //});
        });
    } ,
    loadDataProvide(changePageSize) {
        var obj="@kpilevelcode,@period";
          $.ajax({
            url: "/ChartPeriod/LoadDataProvide/",
                data: {
                obj: obj,
                page: chartperiodlConfig.pageIndex,
                pageSize: chartperiodlConfig.pageSize
            },
            type: "GET",
            contentType: "application/json;charset=utf-8",
            dataType: "json",
            success: function (data) {
             var count = 1;
             var html = '';
             var template = $('#tblcomparechart-template').html();
             $.each(data.listCompare, function (i, item) {
                 html += Mustache.render(template, {
                     No: count,
                     KPILevelCode: item.KPILevelCode,
                     LevelNumber:item.LevelNumber,
                     Area: item.Area,
                     Tooltip:item.StatusPublic==true?"":'data-toggle="tooltip" title="The publicity is private, not comparable!"',
                     StatusPublicAttr: item.StatusPublic==true?"":"disabled",
                     Status: item.Status==true?'<span class="label label-success">visible</span>' : '<span class="label bg-danger">not visible</span>',
                     StatusPublic: item.StatusPublic==true?'<span class="label label-success">Public</span>' : '<span class="label bg-danger">Private</span>'

                 });
                 count++;
             });
                $('#tblcomparechart').html(html);
                  chartperiodController.paging(data.total, function () {
                        chartperiodController.loadDataProvide();
                    }, changePageSize);
                chartperiodController.registerEvent();

                ///Lấy tất cả KPILevelCode và period khi click ghép lại thành chuỗi cách nhau bởi dấu (-) để gửi lên server.
                 var old="";
                $('#comparechart .compare').unbind().change(function (e) {
                    var code = $(this).val();
                    if (old.indexOf($(this).val()) == -1) {
                        old += code + '-';
                         $('.arrcompare').text(old);
                    }
                });
                //Gửi chuỗi ở trên lên server
                $('#btnCompare-kpilevel').off('click').on('click', function () {

                    var value = $('.arrcompare').text().toString();
                    var obj = value.substring(value.length - 1, 0);
                    var kpilevelcode = chartperiodController.getUrlParameter('kpilevelcode');
                    var period = chartperiodController.getUrlParameter('period');
                        obj = obj + '-' +kpilevelcode + ',' + period ;
                    window.location.href = "/Compare/?obj=" + obj+";@standard,@unit";
                 })
            },
            error: function (errormessage) {
                //console.log(errormessage.responseText);
            }
        });
    } ,
    paging: function (totalRow, callback, changePageSize) {
        var totalPage = Math.ceil(totalRow / chartperiodlConfig.pageSize);

        //Unbind pagination if it existed or click change pagesize
        if ($('#pagination a').length === 0 || changePageSize === true) {
            $('#pagination').empty();
            $('#pagination').removeData("twbs-pagination");
            $('#pagination').unbind("page");
        }

        $('#pagination').twbsPagination({
            totalPages: totalPage === 0 ? 1 : totalPage,
            first: "First",
            next: "Next",
            last: "Last",
            prev: "Previous",
            visiblePages: 10,
            onPageClick: function (event, page) {
                chartperiodlConfig.pageIndex = page;
                setTimeout(callback, 500);
            }
        });
    },
    loadDataComment() {
        $.ajax({
            url: '/ChartPeriod/LoadDataComment',
            type: "GET",
            data: {
                dataid: Number($(".dataid").text()),
                userid: Number($("#user").data('userid')),
            },
            dataType: "json",
            success: function (res) {
                var data = res.data;
                console.log("Lay ra tat ca comment");
                console.log(data);
                var total = res.total;

                $('.total-comments').text(total);
                var html = '';
                $.each(data, function (i, item) {

                    var nowDate = new Date(parseInt(item.CommentedDate.substr(6)));
                    var date = new Date(nowDate);
                    var result = (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();
                     html +=' <li class="media">';
                     html += '<a href="#" class="pull-left">';
                     html += '    <img src="/Scripts/plugins/jquery-comments/user-icon.png" alt="" class="img-circle">';
                     html += '</a>';
                     html += '<div class="media-body">';
                     html += '<span class="text-muted pull-right">';
                     html += '    <small class="text-muted">'+result+'</small>';
                     html += '</span>';
                     html += '<strong class="text-success">' + item.FullName + '</strong>';
                     if (item.Read) {
                         html += '<span class="label bg-green"> new</span>';
                     }
                     html +='';
                     html += '<p>';
                     html += item.CommentMsg +'</a>.';
                     html += '</p>';
                     html +=    '</div>';
                     html +='</li >';
                });
                $('#media-list').empty();
                $('#media-list').append(html);
              
            },
            error: function (err) {
            }
        });
    },
}
    </script>
}
<section id="chartperiod">
    <div class="row">
        <div class="col-md-12">
            <!-- LINE CHART -->
            <div class="box box-widget">
                <div class="box-header with-border">
                    @if (period == "W")
                    {
                        <h3 class="box-title" style="font-weight:bold">KPI Chart - @kpiname - Weekly</h3>
                    }
                    else if (period == "M")
                    {
                        <h3 class="box-title" style="font-weight:bold">KPI Chart - @kpiname - Monthly</h3>

                    }
                    else if (period == "Q")
                    {
                        <h3 class="box-title" style="font-weight:bold">KPI Chart - @kpiname - Quarterly</h3>

                    }
                    else if (period == "Y")
                    {
                        <h3 class="box-title" style="font-weight:bold">KPI Chart - @kpiname - Yearly</h3>

                    }
                    @*@if (@Session["UserName"] != null)
                        {
                            <span style="display:none" class="userid">@Session["UserID"].ToString()</span>

                        }*@

                    <div class="box-tools pull-right">
                        <button type="button" class="btn btn-box-tool" data-widget="collapse">
                            <i class="fa fa-minus"></i>
                        </button>
                        <button type="button" class="btn btn-box-tool"><i class="fa fa-times"></i></button>

                    </div>
                </div>
                <div class="box-body">


                    <button type="button" data-toggle="modal" data-target="#modal-group" style="background-color:#135043;color:#fff" class="btn margin btnLike pull-right" id="btnCompare"><i class="fa fa-adjust"></i> Compare</button>
                    @if (@statusfavorite == "false")
                    {
                        <button type="button" class="btn margin btnLike pull-right" id="btnLike" style="background-color:#060247;color:#fff"><i class="fa fa-heart"></i> Add Favourite</button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-default  margin btnLike pull-right disabled" disabled id="btnLike"><i class="fa fa-heart"></i> Added Favourite</button>
                    }
                    <button type="button" class="btn margin pull-right" style="background-color:#09a99f;color:#fff"><i class="fa fa-star"></i> <span>Standard : </span><span class="standard text-bold" style="">0</span></button>

                    <div class="form-inline" style="display:none" id="searchMonth">
                        <label class="my-1 mr-2" for="startMonth">Year</label>
                        <select class="custom-select form-control year my-1 mr-sm-2" id="monthOfYear">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 1999; i <= 2099; i++)
                                {
                                    <option value="@i">Year @i</option>
                                }
                            }
                        </select>
                        <label class="my-1 mr-2" for="startMonth">Start</label>
                        <select class="custom-select form-control my-1 mr-sm-2" id="startMonth">
                            <option value="0" selected>Choose...</option>
                            <option value="1">Jan</option>
                            <option value="2">Feb</option>
                            <option value="3">Mar</option>
                            <option value="4">Apr</option>
                            <option value="5">May</option>
                            <option value="6">Jun</option>
                            <option value="7">Jul</option>
                            <option value="8">Aug</option>
                            <option value="9">Sep</option>
                            <option value="10">Oct</option>
                            <option value="11">Nov</option>
                            <option value="12">Dec</option>
                        </select>
                        <label class="my-1 mr-2" for="endMonth">End</label>
                        <select class="custom-select form-control my-1 mr-sm-2" id="endMonth">
                            <option value="0" selected>Choose...</option>
                            <option value="1">Jan</option>
                            <option value="2">Feb</option>
                            <option value="3">Mar</option>
                            <option value="4">Apr</option>
                            <option value="5">May</option>
                            <option value="6">Jun</option>
                            <option value="7">Jul</option>
                            <option value="8">Aug</option>
                            <option value="9">Sep</option>
                            <option value="10">Oct</option>
                            <option value="11">Nov</option>
                            <option value="12">Dec</option>
                        </select>
                        <button type="button" class="btn btn-warning margin" id="btnClearSearch"><i class="fa fa-remove"></i> Reset search</button>

                    </div>

                    @* week *@
                    <div class="form-inline" style="display:none" id="searchWeek">
                        <label class="my-1 mr-2" for="startMonth">Year</label>
                        <select class="custom-select form-control year my-1 mr-sm-2" id="weekOfYear">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 1999; i <= 2099; i++)
                                {
                                    <option value="@i">Year @i</option>
                                }
                            }
                        </select>
                        <label class="my-1 mr-2" for="startMonth">Week Start</label>
                        <select class="custom-select form-control my-1 mr-sm-2" id="startWeek">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 1; i <= 52; i++)
                                {
                                    <option value="@i">Week @i</option>
                                }
                            }
                        </select>
                        <label class="my-1 mr-2" for="endMonth">Week End</label>
                        <select class="custom-select form-control my-1 mr-sm-2" id="endWeek">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 1; i <= 52; i++)
                                {
                                    <option value="@i">Week @i</option>
                                }
                            }
                        </select>
                        <button type="button" class="btn btn-warning margin" id="btnClearSearch"><i class="fa fa-remove"></i> Reset search</button>
                    </div>
                    @* Quarter *@
                    <div class="form-inline" style="display:none" id="searchQuarter">
                        <label class="my-1 mr-2" for="startMonth">Year</label>
                        <select class="custom-select form-control year my-1 mr-sm-2" id="quarterOfYear">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 1999; i <= 2099; i++)
                                {
                                    <option value="@i">Year @i</option>
                                }
                            }
                        </select>
                        <label class="my-1 mr-2" for="startMonth">Start</label>
                        <select class="custom-select form-control my-1 mr-sm-2" id="startQuarter">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 1; i <= 4; i++)
                                {
                                    <option value="@i">Quarter @i</option>
                                }
                            }
                        </select>
                        <label class="my-1 mr-2" for="endMonth">End</label>
                        <select class="custom-select form-control my-1 mr-sm-2" id="endQuarter">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 1; i <= 4; i++)
                                {
                                    <option value="@i">Quarter @i</option>
                                }
                            }
                        </select>
                    </div>
                    @* Year *@
                    <div class="form-inline" style="display:none" id="searchYear">
                        <label class="my-1 mr-2" for="startMonth">Start</label>
                        <select class="custom-select form-control my-1 mr-sm-2" id="startYear">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 2019; i <= 2050; i++)
                                {
                                    <option value="@i">Year @i</option>
                                }
                            }
                        </select>
                        <label class="my-1 mr-2" for="endMonth">End</label>
                        <select class="custom-select form-control my-1 mr-sm-2" id="endYear">
                            <option value="0" selected>Choose...</option>
                            @{
                                for (int i = 2019; i <= 2050; i++)
                                {
                                    <option value="@i">Year @i</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="chart">
                        @*<canvas id="lineChart" style="height:250px"></canvas>*@
                        <canvas id="lineChart" style="height:500px"></canvas>

                    </div>
                </div>
                <div class="box-footer">

                    <p class="text-green text-bold" style="font-size:16px;display:none" id="fromDateEndDate">
                        <span class="fromDayOfWeek"></span>
                        <span class="endDayOfWeek"></span>
                    </p>
                    <p class="text-green text-bold" style="font-size:16px;display:none" id="fromDateEndDateM">
                        <span class="fromDayOfMonth"></span>
                        <span class="endDayOfMonth"></span>
                    </p>
                    <p class="text-green text-bold" style="font-size:16px;display:none" id="fromDateEndDateQ">
                        <span class="fromDayOfQuarter"></span>
                        <span class="endDayOfQuarter"></span>
                    </p>
                </div>
            </div>

        </div>
        <div class="col-md-12">
            <div class="box box-widget">
                <div class="box-header with-border">
                    @if (period == "W")
                    {
                        <h3 class="box-title" style="font-weight:bold">Data  - @kpiname - Weekly</h3>
                    }
                    else if (period == "M")
                    {
                        <h3 class="box-title" style="font-weight:bold">Data - @kpiname - Monthly</h3>

                    }
                    else if (period == "Q")
                    {
                        <h3 class="box-title" style="font-weight:bold">Data - @kpiname - Quarterly</h3>

                    }
                    else if (period == "Y")
                    {
                        <h3 class="box-title" style="font-weight:bold">Data - @kpiname - Yearly</h3>

                    }

                </div>
                <!-- /.box-header -->
                <div class="box-body">
                    <div class="table-responsive">
                        <table class="table table-bordered" style="margin-bottom:20px;" id="tblDataChart">
                            <tbody>
                                <tr></tr>
                                <tr></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                @*<div class="box-footer" id="textarea-remark">
                        <div class="form-group">
                            <span class="lastRemark" style="display:none"></span>
                            <label for="lastRemark" class="lastRemarkLabel"></label>
                            <textarea data-dataid="" style="font-weight:bold;color:#0094ff" class="form-control" id="lastRemark"></textarea>

                        </div>
                    </div>*@
            </div>
        </div>
    </div>

    @RenderPage("_Modal.cshtml")
</section>